//scalapackage coop.rchain.rholang.rev

//requires RhoSpec
new
  rl(`rho:registry:lookup`), RhoSpecCh,
  revAddress(`rho:rev:address`),
  stdlog(`rho:io:stdlog`),
  setup,
  test_valid_address, test_invalid_address
in {
  rl!(`rho:id:6wnujzcraztjfg941skrtbdkdgbko8nuaqihuhn15s66oz8ro5gwbb`, *RhoSpecCh) |
  for(@(_, RhoSpec) <- RhoSpecCh) {
    @RhoSpec!("testSuite", *setup,
      [
        ("Validating a valid address returns Nil", *test_valid_address),
        ("Validating a invalid address returns a non-Nil value", *test_invalid_address),
      ])
  } |

  contract setup(returnCh) = {
    returnCh!([])
  } |

  contract test_invalid_address(rhoSpec, _, ackCh) = {
    new retCh in {
      revAddress!("validate", "some_obviously_invalid_address", *retCh) |
      rhoSpec!("assert", (Nil, "!= <-", *retCh), "Expecting a non-Nil value containing the error message", *ackCh)
    }
  } |

  contract test_valid_address(rhoSpec, _, ackCh) = {
    stdlog!("info", "test valid address") |
    new retCh in {
      revAddress!("validate", "1111K9MczqzZrNkUNmNGrNFyz7F7LiCUgaCHXd28g2k5PxiaNuCAi", *retCh) |
      rhoSpec!("assert", (Nil, "== <-", *retCh), "expecting a Nil value since there are no errors", *ackCh)
    }
  }
}
